<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <title>MyStockBook - @ViewBag.Title</title>
    @RenderSection("meta", required: false)
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link href="~/Content/themes/default/bootstrap.css" rel="stylesheet">

    @Html.Partial("_html5shiv")

    <link href="~/Content/ico/favicon.ico" rel="shortcut icon" type="image/x-icon" />
</head>
<body>
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
            m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-50738734-1', 'rit.edu');
        ga('send', 'pageview');

    </script>
    <div id="fb-root"></div>
    <script>
        (function (d, s, id) {
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) return;
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_US/all.js#xfbml=1&appId=733188256714213";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
    </script>

    @Html.Partial("_NavBar")

    @RenderSection("featured", required: false)

    <div class="container">
        <div class="login-only">
            @RenderBody()
        </div>  
        <hr />
        <div class="footer">
            <p>&copy; @DateTime.Now.Year - Dev Team 5</p>
        </div>
    </div>
    <script type="text/javascript">
        function showHideStatus() {
            FB.getLoginStatus(function (response) {
                if (response.status === 'connected') {
                    $('.logout-only').hide();
                    $('.login-only').show();
                } else if (response.status === 'not_authorized' ) {
                    $('.logout-only').hide();
                    $('.login-only').show();
                } else {
                    $('.login-only').hide();
                    $('.logout-only').show();
                }
            });
        }
        
    </script>
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script>
        function sendMessage() {
            FB.ui({
                method: 'send',
                link: 'http://vm344e.se.rit.edu/R1',
            });
        }

        function addFriend() {
            var id = prompt("Enter FaceBook ID/UserName", "");

            if (id != null && id !== "") {
                FB.ui({
                    method: 'friends',
                    id: id
                }, function (response) { });
            }
        }

        function addPhoto() {
            var id = prompt("Enter URL of Photo", "");

            if (id != null && id !== "") {
                sendImage(id, "");
            }
        }

        function sendImage(img_url, text) {
            //Check to see if the user has authenticated the App.
            FB.getLoginStatus(function (response) {

                if (response.status === 'connected') {
                    //If you want the user's Facebook ID or their access token, this is how you get them.
                    var uid = response.authResponse.userID;
                    var access_token = response.authResponse.accessToken;

                    FB.api("/me/photos", 'post', { message: text, access_token: access_token, url: img_url }, function (response) {
                        if (!response || response.error) {
                            alert("Photo could not be uploaded. Please retry later.");
                        } else {
                            alert("Photo uploaded to Facebook!");
                        }
                    });

                }
            });
        }

        function getName() {
            var $name = $('#displayname');
            FB.api('/me', function (response) {
                $name.val(response.name);
            });
        }

        function updateStatus() {
            var body = document.getElementById("status_update").value;
            FB.api('/me/feed', 'post', { message: body }, function (response) {
                if (!response || response.error) {
                    alert("Status could not be updated. Please retry later.");
                } else {
                    alert("Status updated!");
                }
            });
        }

        function news() {
            FB.api("/me/home", function (response) {
                if (response && !response.error) {
                    for (var i = 0; i < 15; i++) {
                        if (response.data[i].from.name) {
                            document.getElementById("newsFeedResponse").innerHTML += "<b>" + response.data[i].from.name + "</b>";
                        }
                        if (response.data[i].to) {
                            document.getElementById("newsFeedResponse").innerHTML += "<b> -> " + response.data[i].to.data[0].name + "</b><br>";
                        } else {
                            document.getElementById("newsFeedResponse").innerHTML += "<br>";
                        }
                        if (response.data[i].message) {
                            document.getElementById("newsFeedResponse").innerHTML += response.data[i].message + "<br>";
                        }
                        if (response.data[i].story) {
                            document.getElementById("newsFeedResponse").innerHTML += "<i>" + response.data[i].story + "</i><br>";
                        }
                        if (response.data[i].picture) {
                            document.getElementById("newsFeedResponse").innerHTML += "<img src='" + response.data[i].picture + "'/><br>";
                        }
                        if (response.data[i].name) {
                            document.getElementById("newsFeedResponse").innerHTML += "<i>" + response.data[i].name + "</i><br>";
                        }


                        document.getElementById("newsFeedResponse").innerHTML += "<br>";
                    }

                }
            });
        }

        function eventObject(name, start_time, end_time, id) {
            this.title = name;
            this.start = start_time;
            this.end = end_time
            this.id = id;
        }

        function calenderReload() {
            $('#calendar').fullCalendar('refetchEvents');
        }


        function postEvent() {


            var new_event = {
                name: document.getElementById("event_name").value,
                description: document.getElementById("event_description").value,
                location: document.getElementById("event_location").value,
                start_time: document.getElementById("event_start").value, // Example Start Date
                end_time: document.getElementById("event_end").value // Example End Date
            };


            FB.api('/me/events', 'post', new_event, function (result) {
                console.log("Check3");
                console.log(result);
            });
            
            calenderReload();
        }


        function events() {
            var fEvents = [];
            FB.api("me/events/not_replied?fields=name,start_time,end_time,id", function (response) {
                if (response && !response.error) {
                    for (var i = 0; i < response.data.length; i++) {
                        var eventString = "title: '" + response.data[i].name + "',\n" + "start: '" + response.data[i].start_time + "',\n" + "end: '" + response.data[i].end_time + "',\n" + "id: '" + response.data[i].id + "'";
                        //console.log(eventString);
                        fEvents.push(new eventObject(response.data[i].name, response.data[i].start_time, response.data[i].end_time, response.data[i].id));
                    }
                }
            })

            FB.api("me/events/maybe?fields=name,start_time,end_time,id", function (response) {
                if (response && !response.error) {
                    for (var i = 0; i < response.data.length; i++) {
                        var eventString = "title: '" + response.data[i].name + "',\n" + "start: '" + response.data[i].start_time + "',\n" + "end: '" + response.data[i].end_time + "',\n" + "id: '" + response.data[i].id + "'";
                        //console.log(eventString);
                        fEvents.push(new eventObject(response.data[i].name, response.data[i].start_time, response.data[i].end_time, response.data[i].id));
                    }
                }
            });

            FB.api("me/events/attending?fields=name,start_time,end_time,id", function (response) {
                if (response && !response.error) {
                    for (var i = 0; i < response.data.length; i++) {
                        var eventString = "title: '" + response.data[i].name + "',\n" + "start: '" + response.data[i].start_time + "',\n" + "end: '" + response.data[i].end_time + "',\n" + "id: '" + response.data[i].id + "'";
                        console.log(eventString);
                        fEvents.push(new eventObject(response.data[i].name, response.data[i].start_time, response.data[i].end_time, response.data[i].id));
                    }
                }
            });

            var d = new Date();

            var month = d.getMonth() + 1;
            var day = d.getDate();

            var output = d.getFullYear() + '-' +
                (('' + month).length < 2 ? '0' : '') + month + '-' +
                (('' + day).length < 2 ? '0' : '') + day;

            $('#calendar').fullCalendar({
                header: {
                    left: 'prev,next today',
                    center: 'title',
                    right: 'month,agendaWeek,agendaDay'
                },
                defaultDate: output,
                editable: false,
                events: fEvents
            });
            //$('#calendar').fullCalendar.events = events;
            //alert($('#calendar').fullCalendar.events);
        }

    </script>

    
    <script type="text/javascript" src="~/Scripts/jquery.jstockticker-1.1.1.js"></script>
    <script type="text/javascript" src="~/Scripts/bootstrap.min.js"></script>
    <script type="text/javascript" src="~/Scripts/QuoteService.js"></script>
    <script type="text/javascript" src="~/Scripts/purl.js"></script>
    <script type="text/javascript" src="~/Scripts/highstock.js"></script>
    <script type="text/javascript" src="~/Scripts/InteractiveChartApi.js"></script>

    <script type="text/javascript">

        function graph() {
            new Markit.InteractiveChartApi('@ViewBag.symbol', 730);
        };

    </script>

    <script type="text/javascript">
        /**
        * Makes call to markit for ticker and with setPrice as callback function
        */
        function getPrice(ticker) {
            new QuoteService(ticker, setPrice);
        }

        /*
        *Callback function for getPrice
        */
        function setPrice(jsonResult) {
            //do something with jsonResult result, example:
            alert(jsonResult.LastPrice + " " + jsonResult.Change);
        }

        QuoteService.prototype.success = function (jsonResult) {
            var $container = $("<div class='hide' id='resultContainer' />");
            $container.append("<h4>" + jsonResult.Name + " (" + jsonResult.Symbol + ")</h4>");
            $container.append(this.renderResultTable(jsonResult));

            $container.fadeIn('fast');
        };

        QuoteService.prototype.renderResultTable = function (jsonResult) {
            var thead = $("#stockchartHead"),
                tbody = $("#stockChartBody"),
                tableHeadCells = [];
            tableCells = [];

            tableHeadCells.push("<tr>");
            tableHeadCells.push("<th>Last Price</th>");
            tableHeadCells.push("<th>Change</th>");
            tableHeadCells.push("<th>Change Percent</th>");
            tableHeadCells.push("<th>Change Percent YTD</th>");
            tableHeadCells.push("<th>Last Traded</th>");
            tableHeadCells.push("</tr>");

            tableCells.push("<tr>");
            tableCells.push("<td>$", jsonResult.LastPrice, "</td>");
            tableCells.push("<td>", this.formatChgPct(jsonResult.Change), "</td>");
            tableCells.push("<td>", this.formatChgPct(jsonResult.ChangePercent), "%</td>");
            tableCells.push("<td>", jsonResult.ChangePercentYTD.toFixed(2), "%</td>");
            tableCells.push("<td>", jsonResult.Timestamp, "</td>");
            tableCells.push("</tr>");

            thead.append(tableHeadCells.join(""));
            tbody.append(tableCells.join(""));
        };

        QuoteService.prototype.formatChgPct = function (chg) {
            //the quote API returns negative numbers already,
            //so we just need to add the + sign to positive numbers
            return (chg <= 0) ? chg.toFixed(2) : "+" + chg.toFixed(2);
        };

        /**
        * Define the QuoteService.
        * First argument is symbol (string) for the quote. Examples: AAPL, MSFT, JNJ, GOOG.
        * Second argument is fCallback, a callback function executed onSuccess of API.
        */
        function QuoteService(sSymbol, fCallback) {
            this.symbol = sSymbol;
            this.fCallback = fCallback;
            this.DATA_SRC = "http://dev.markitondemand.com/Api/v2/Quote/jsonp";
            this.makeRequest();
        };

        /**
        * Starts a new ajax request to the Quote API
        */
        QuoteService.prototype.makeRequest = function () {
            //Abort any open requests
            if (this.xhr) { this.xhr.abort(); }
            //Start a new request
            this.xhr = $.ajax({
                data: { symbol: this.symbol },
                url: this.DATA_SRC,
                dataType: "jsonp",
                success: this.handleSuccess,
                error: this.handleError,
                context: this
            });
        };

        /**
        * Ajax success callback. fCallback is the 2nd argument in the QuoteService constructor.
        */
        QuoteService.prototype.handleSuccess = function (jsonResult) {
            this.fCallback(jsonResult);
        };

        /**
        * Ajax error callback
        */
        QuoteService.prototype.handleError = function (jsonResult) {
            console.error(jsonResult);
        };
    </script>
   
    <script type="text/javascript">


        $(function () {

            var tickerList = ["GOOG", "AAPL", "MSFT", "FB", "TWTR", "YHOO", "INTC", "CSCO"];

            tickerList.forEach(function (ticker) {
                new QuoteService(ticker, function (jsonResult) {

                    //this.clearResult();

                    //Catch errors
                    if (!jsonResult || jsonResult.Message) {
                        return;
                    }

                    this.TickerSuccess(jsonResult);

                });
            });

        });

        QuoteService.prototype.TickerSuccess = function (jsonResult) {
            console.log('success');
            var ChangePercent = Math.floor((jsonResult.ChangePercent) * 100);

            console.log(ChangePercent);
            console.log(jsonResult.ChangePercent);

            if (ChangePercent > 0.00) {
                $container = $("<span class=\"up\">");
            }
            else if (ChangePercent < 0.00) {
                $container = $("<span class=\"down\">");
            }
            else {
                $container = $("<span class=\"eq\">");
            }

            $container.append("<span class=\"quote\">" + jsonResult.Symbol + " </span>" + jsonResult.LastPrice + " " + this.formatChgPct(jsonResult.ChangePercent) + "\%</span>");

            $("#quote").after($container);
            $container.fadeIn('fast');

        };

    </script>
    @RenderSection("scripts", required: false)
</body>

</html>

